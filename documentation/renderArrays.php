<?php
namespace Ceres\Documentation;

/*
 * Much like Drupal, CERES uses a `renderArray` to describe the data to be 
 * rendered. They are generated by Extractors, which serve as the bridge
 * between Fetchers and Renderers. Thus, for example, we have 
 * `\Ceres\Extractor\SparqlToTable` to take a SPARQL query result and
 * format the data to be rendered as a table, using `$tableRenderArray`
 * 
 * Simple text to render is just an unkeyed entry in the `data` part of
 * arrays. When a Renderer processes a `renderArray`, text becomes a 
 * text node.
 * 
 * When the Renderer encounters an array, it assumed it is a `renderArray`
 * of the type given, and assigns a sub-processor accordingly. Simple elements
 * such as <img> are by default short methods in  `\Ceres\Renderer\Html`. More
 * complex rendering tasks that involve their own Renderers, usually with 
 * their own `rendererTemplate`.
 * 
 * Global HTML attributes will be applied, but not all are fully anticipated,
 * and may be ignored or overridden by Renderers. Many global attributes
 * should more properly be handled by the Renderer to separate the
 * concerns of Extractors and Renderers. The ones listed here are the most
 * likely candidates for Extractor data.
 * 
 *    'globalAtts' => [
 *               'dataAtts' => ['data-X' => ''],
 *               'id' => '',
 *               'role' => '',
 *               'lang' => '',
 *               'title' => '',
 *               ],
 */

/* `type` refers to the array structure, which is often the same
 * as the renderer to use.
 * For the same data structure but different renderers, `subtype` 
 * is added.
 */
 


 
$textRenderArray = ['type' => 'text',
                    'subtype' => '', //the HTML element to wrap the text in
                    'data' => 'text to render'
                    ];

$imgRenderArray = ['type' => 'img',
                   'data' => [
                        'globalAtts' => ['dataAtts' => ['data-X' => ''],
                        'id' => 'any id containing the string `ceres` will be stripped out',
                        'role' => '',
                        'lang' => '',
                        'title' => '',
                    ],
                        'url' => 'http://....',
                        'alt' => 'alt text',
                   ]
                ];


$aRenderArray = ['type' => 'a',
                    'data' => [
                        'href' => 'http://....',
                        'content' => 'content (text, img, etc) to link',
                        'target' => '_blank'
                    ]
                ];

$listRenderArray = ['type' => 'list',
                    'subtype' => 'ul | ol', // may be ignored by renderer
                    'data' => [
                        'li 1',
                        'li 2',
                        'li a billion'
                    ]
                ];

$dlRenderArray = ['type' => 'dl',
                  // the keyValue subtype is for simple pairs,
                  // styled however the KeyValue renderer wants
                  'subtype' => '?keyValue',
                  'data' => [
                    // an array of dt/dd groups
                    // a simplified form with only a single dt
                    // and dd as strings can omit the outer array structure
                    ['dts' => [] , 'dds' => []],
                    ['dts' => [] , 'dds' => []],
                    ['dts' => [] , 'dds' => []],
                  ]
            ];

/**
 * 
 * Each data array row is table row. Whether the first row is treated
 * as a heading row is an option for the Renderer.
 */
$tableRenderArray = ['type' => 'table',
                     'data' => [ 
                        ['heading', 'Hedding', 'heading'],
                        ['data1', 'data2',
                            [
                                'type' => 'link',
                                'data' => ['content' => 'linkable text',
                                            'href' => 'https://',
                                            'target' => '_blank'
                                            ]
                            ]
                        ]
                    ]
                ];

/** 
 * 
 * Identical for `card` and `details`, but <details> HTML limits
 * valid elements to what <p> can contain.
 * 
 * Cards and Details have different Renderers because they use
 * different rendererTemplates
 * 
*/ 
$cardRenderArray = ['type' => 'card',
                    // optional to point renderer to 
                    // using <details> element, but it can ignore this
                    'subtype' => 'details', 
                    'data' => ['main' => ['text for main', 
                                            ['type' => 'img',
                                             'data' => []
                                            ]
                                         ],
                               'secondary' => ['text for 2ndary',
                                                ['type' => 'img',
                                                 'data' => []
                                                ],
                                                ['type' => 'dl',
                                                 'subtype' => 'keyValue',
                                                 'data' => []
                                                ]
                                              ]
                              ]
                ];

$detailsRenderArray = $cardRenderArray;


/**
 * 
 * If present, the <audio> will be wrapped with a <figure> element,
 * with the given text for the <figcaption>. Set `figcaption` to `true`
 * to use default text, e.g. "Download Audio". Position is always
 * determined by the Renderer.
 * 
 * `controls` is handled by the Renderer
 * 
 */                             
$audioRenderArray = ['type' => 'audio',
                     'data' => [
                        'src' => 'http://...',
                        'alt' => "alt text",
                        'figcaption' => ['text' => 'fig caption text'],
                        'transcription' => [], //@todo figure out the array to deal with this                        
                        'download' => ['type' => 'a', // as above for `a`
                                       'data' => []
                                      ]
                     ]
                ];
